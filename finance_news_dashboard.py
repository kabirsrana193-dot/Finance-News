# -*- coding: utf-8 -*-
"""Finance News Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lsVzOOITAdOxW1O7LmWyGMp93UQYfXDt
"""

# finance_dashboard.py

from gnews import GNews
from transformers import pipeline
import requests
import pandas as pd
import dash
from dash import html
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output

# --------------------------
# Config
# --------------------------
GNEWS_API_KEY = "719d7d3b424cb76936b296ea25ee44da"
SEARCH_TERMS = [
    "NSE", "BSE", "Sensex", "Nifty", "stock market", "IPO", "RBI",
    "banking", "earnings", "quarterly results", "dividend", "merger",
    "acquisition", "sales", "revenue", "inflation", "rate"
]

# FinBERT model
finbert = pipeline("sentiment-analysis", model="distilbert-base-uncased-finetuned-sst-2-english")


# --------------------------
# Functions
# --------------------------
def fetch_news():
    articles = []
    for term in SEARCH_TERMS:
        url = f"https://gnews.io/api/v4/search?q={term}&lang=en&country=in&max=5&apikey={GNEWS_API_KEY}"
        try:
            response = requests.get(url)
            data = response.json()
            if "articles" in data:
                articles.extend(data["articles"])
        except Exception as e:
            print("Error:", e)
    return articles

def process_articles(articles):
    records = []
    seen_titles = set()
    for art in articles:
        title = art["title"]
        if title in seen_titles:
            continue
        seen_titles.add(title)
        url = art["url"]
        source = art["source"]["name"]
        sentiment = finbert(title[:512])[0]["label"]
        records.append({"Title": title, "Source": source, "Sentiment": sentiment, "Link": url})
    return pd.DataFrame(records)

# --------------------------
# Dash App
# --------------------------
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.COSMO])

app.layout = dbc.Container([
    html.H1("ðŸ“ˆ Finance News Dashboard", style={"textAlign": "center", "marginTop": 20}),
    html.Hr(),
    dbc.Button("ðŸ”„ Refresh News", id="refresh-btn", color="primary", className="mb-3"),
    html.Div(id="news-table")
], fluid=True)

@app.callback(
    Output("news-table", "children"),
    Input("refresh-btn", "n_clicks")
)
def update_news(n_clicks):
    articles = fetch_news()
    df = process_articles(articles)
    if df.empty:
        return "No articles found."
    table = dbc.Table.from_dataframe(df, striped=True, bordered=True, hover=True)
    return table

server = app.server  # ðŸ”‘ required for Render

if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 8050))
    app.run_server(debug=False, host="0.0.0.0", port=port)
