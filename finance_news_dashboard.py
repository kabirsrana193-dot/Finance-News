# -*- coding: utf-8 -*-
"""finance_news_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SE8l0QnJGneyuzGT4o2yMKiEkAcy7x_p
"""

# finance_news_dashboard.py

import os
import feedparser
from transformers import pipeline
import dash
from dash import html, dcc
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Create the Dash app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.COSMO])
server = app.server

# --------------------------
# Config
# --------------------------
SEARCH_TERMS = [
    "NSE", "BSE", "Sensex", "Nifty", "stock market", "IPO", "RBI",
    "banking", "earnings", "quarterly results", "dividend", "merger",
    "acquisition", "sales", "revenue", "inflation", "rate"
]

MAX_TOTAL_RESULTS = 25  # maximum total articles

# FinBERT model
finbert = pipeline("sentiment-analysis", model="yiyanghkust/finbert-tone")

# Global memory to avoid repeated articles
seen_titles_global = set()

# --------------------------
# Functions
# --------------------------
def fetch_news():
    all_articles = []
    for term in SEARCH_TERMS:
        try:
            url = f"https://news.google.com/rss/search?q={term}+when:1d&hl=en-IN&gl=IN&ceid=IN:en"
            feed = feedparser.parse(url)
            all_articles.extend(feed.entries)
        except Exception:
            continue
        # Stop once we reach the max total results
        if len(all_articles) >= MAX_TOTAL_RESULTS:
            all_articles = all_articles[:MAX_TOTAL_RESULTS]
            break
    return all_articles


def process_articles(articles):
    global seen_titles_global
    records = []
    for art in articles:
        title = art.title
        if title in seen_titles_global:
            continue
        seen_titles_global.add(title)
        source = getattr(art, "source", {}).get("title", "Unknown") if hasattr(art, "source") else "Unknown"
        url = art.link
        sentiment = finbert(title[:512])[0]["label"]
        records.append({"Title": title, "Source": source, "Sentiment": sentiment, "Link": url})
    return pd.DataFrame(records)

# --------------------------
# Dash App
# --------------------------
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.COSMO])
server = app.server  # required for Render/Railway

app.layout = dbc.Container([
    html.H1("ðŸ“ˆ Finance News Dashboard", style={"textAlign": "center", "marginTop": 20}),
    html.Hr(),
    dbc.Button("ðŸ”„ Refresh News", id="refresh-btn", color="primary", className="mb-3"),
    html.Div(id="news-table"),
    html.Div(id="sentiment-graph")
], fluid=True)

# --------------------------
# Callbacks
# --------------------------
@app.callback(
    [Output("news-table", "children"),
     Output("sentiment-graph", "children")],
    Input("refresh-btn", "n_clicks")
)
def update_news(n_clicks):
    articles = fetch_news()
    df = process_articles(articles)

    if df.empty:
        return "No new articles found.", None

    # News table
    table = dbc.Table.from_dataframe(df, striped=True, bordered=True, hover=True)

    # Sentiment bar chart
    sentiment_counts = df['Sentiment'].value_counts().reset_index()
    sentiment_counts.columns = ["Sentiment", "Count"]
    fig = px.bar(sentiment_counts, x="Sentiment", y="Count", color="Sentiment",
                 color_discrete_map={"positive": "green", "neutral": "gray", "negative": "red"},
                 title="Sentiment Distribution")
    graph = dcc.Graph(figure=fig)

    return table, graph

# --------------------------
# Run app
# --------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True)
